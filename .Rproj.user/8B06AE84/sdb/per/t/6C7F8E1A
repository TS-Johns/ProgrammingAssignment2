{
    "contents" : "## Author:  TS Johns\n## Date:    2014-05-25\n## About:   This package contains implementation of Programming Assingment 2, for the R Programming course (part of John Hopkins - Data science Track)\n##          The R package contains two functions used for storing an in-memory cached version of the matrix inverse\n## Credits: This package was produced as a clone of the repo https://github.com/rdpeng/ProgrammingAssignment2\n##\n## Included Functions:\n## - makeCacheMatrix\n## - cacheSolve\n\n\n## This function takes a matrix as input and utilizes internal function variable to store in-memory cache of inverse\n## Function returns list of the following functions, which can be used against the returned object\n## - set\n## - get\n## - getInverse\n## - setInverse\nmakeCacheMatrix <- function(x = matrix()) {\n  ##Internal variable used to store cached matrix inverse\n  ##Note: Variable is initialized to NULL at first\n  inv <- NULL\n  \n  ##Sets matrix data, via <<-\n  ##Note: When new matrix set, cache is reset back to NULL\n  ##Note: Error created if supplied item is not a matrix and if not square - (on error matrix cache will be reset to null)\n  set <- function(newMatrix) {\n    ##Note: stored variable is set to NULL initially to ensure it is NULL even if error occurs\n    inv <<- NULL\n  \n    if(is.null(newMatrix))\n      stop(\"Error in supplied arguments: Input is null\")\n    else if(!is.matrix(newMatrix))\n      stop(\"Error in supplied arguments: Input is not matrix\")\n    else if(ncol(newMatrix) != nrow(newMatrix))\n      stop(\"Error in supplied arguments: Input is not square matrix\")\n    else\n      x <<- newMatrix  ##Succesully set new matrix data    \n  }\n  \n  ##Returns matrix data\n  ##Note: simple getter so one line function\n  get <- function() x\n\n  ##Returns cached matrix inverse\n  ##Note: simple getter so one line function\n  getInverse <- function() inv\n  \n  ##Sets matrix inverse to internal cached variable, via <<-\n  ##Note: Inverse is assumed to be computed outside function and should be linked to previously set matrix\n  ##Note: Error created if supplied item is not a matrix and if not square (on error inv will be reset to NULL)\n  setInverse <- function(matInv) {\n    ##Set to NULL in case of error\n    inv <<- NULL\n    \n    if(is.null(matInv))\n      stop(\"Error in supplied arguments: Input is null\")\n    else if(!is.matrix(matInv))\n      stop(\"Error in supplied arguments: Input is not matrix\")\n    else if(ncol(matInv) != nrow(matInv))\n      stop(\"Error in supplied arguments: Input is not square matrix\")\n    else\n      inv <<- matInv  ##Succesully set to desired inverse\n  }\n  \n  \n  ##Final output - Return list of functions\n  list(get = get, set = set,\n       getInverse = getInverse, setInverse = setInverse)\n}\n\n\n## This function takes a \"special\" matrix created by makeCacheMatrix function and returns its inverse\n## Note:  Function utilizes in-memory cache variable to check to see if inverse is already computed\n##        If not already cached, the inverse is computed via solve and stored in-memory\n##        Extra parameters may be passed to solve() via standard ...\ncacheSolve <- function(x, ...) {\n  ## Attempt to find inverse from cache\n  inv <- x$getInverse()\n  \n  ## If not NULL, return cached inverse\n  if(!is.null(inv)) {\n    message(\"Getting cached matrix inverse\")\n    return(inv)\n  }\n  \n  ## If NULL branch, get matrix - computeinverse - set internally - return results\n  matData <- x$get()  \n  inv <- solve(matData, ...)\n  x$setInverse(inv)\n  \n  ## Final return - desired matrix inverse\n  inv\n}\n",
    "created" : 1401053173706.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "953136780",
    "id" : "6C7F8E1A",
    "lastKnownWriteTime" : 1401053707,
    "path" : "C:/SourceControl/Coursera/DataScienceTrack/IntroRProgram/PA2/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}